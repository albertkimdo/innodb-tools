#summary Types on constraints to set on table_defs.h

== Introduction ==

The `constraints_parser` application parses a tablespace file, eliminates invalid data, and produces a tab delimited file, ready for import using `LOAD DATA INFILE`. The step is described in [RecoveryStepsRecoveringTablespaceData Recovering tablespace data].

Constraints/limits are defined in the `include/table_def.h` file.

Following is a list of available constraints, per field type.

=== General ===

  * Any field can be set to nullable or non-nullable:
    `can_be_null: TRUE|FALSE`
  * Additional limits can be set with:
    `has_limits: TRUE`

=== Type: INT ===

  * INT allows for the following constraints:
  {{{
      int_min_val
      int_max_val
  }}}
  * Examples:
  {{{
      int_min_val: 1,
      int_max_val: 12345,
      ...
  }}}

=== Type: INT UNSIGNED ===
  * INT UNSIGNED allows for the following constraints:
  {{{
      uint_min_val
      uint_max_val
  }}}
  * Examples:
  {{{
      uint_min_val: 1,
      uint_max_val: 65535,
      ...
  }}}

=== Type: DATE/DATETIME ===
  * `constraints_parser` automatically validates data for those types.
  * There is currently no manual constraint.

=== Type: TIMESTAMP ===
  * Internally represented as UINT.

=== Type: CHAR/TEXT ===
  * CHAR, VARCHAR types and TEXT variants have the following constraints:
  {{{
      char_min_len
      char_max_len
      char_ascii_only
      char_digits_only
  }}}
  * Will be available as of release 0.4:
  {{{
      char_regex
  }}}

  * Examples:
  Constraint on value length:
  {{{
      char_min_len: 2,
      char_max_len: 40,
      ...
  }}}

  Constraint on value type:
  {{{
      char_ascii_only: TRUE,
      ...
  }}}

  Constraint by regular expression; only consider URL-like values:
  {{{
      char_regex: "^http://",
      ...
  }}}
  While the char_regex constraint can be used to mimic all of the above (e.g. `"[0-9]+"` to mimic `char_digits_only`, it is most CPU intensive and far from being efficient.

=== Type: ENUM ===
  * ENUM allows for the following constraints:
  {{{
      enum_values_count
  }}}
  * Examples: 
  Verify internal enum's INT representation is <= 7:
  {{{
      enum_values_count: 7,
      ...
  }}}