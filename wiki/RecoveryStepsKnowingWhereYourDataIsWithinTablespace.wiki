#summary Recovery steps: Knowing where your data resides withing the tablespace

== Locating the data ==

If you're using `innodbfile_per_table`, you can skip this step. Your data resides within the `.ibd` file. It is a tablespace of its own.

In our example, we used shared tablespace. We wish to learn where, withing the shared tablespace, the data of our `customer` table resides.


=== Asking for InnoDB info ===

The following step assumes the table has not been dropped. 

In some schema, say, `test`, do:
{{{
mysql> CREATE TABLE `innodb_table_monitor` (`id` int(11) default NULL) ENGINE=InnoDB;
Query OK, 0 rows affected (0.01 sec)
}}}

(If the table already exists, DROP then CREATE again). Wait for a few seconds, then look at the MySQL error log. A summary of the output we're looking for follows:
{{{
===========================================
090630  2:14:33 INNODB TABLE MONITOR OUTPUT
===========================================
--------------------------------------
...
TABLE: name sakila/film, id 0 125, columns 17, indexes 4, appr.rows 0
  COLUMNS: film_id: DATA_INT len 2 prec 0; title: type 12 len 765 prec 0; description: type 5 len 10 prec 0; release_year: DATA_INT len 1 prec 0; language_id: DATA_INT len 1 prec 0; original_language_id: DATA_INT len 1 prec 0; rental_duration: DATA_INT len 1 prec 0; rental_rate: type 3 len 2 prec 0; length: DATA_INT len 2 prec 0; replacement_cost: type 3 len 3 prec 0; rating: DATA_INT len 1 prec 0; special_features: DATA_INT len 1 prec 0; last_update: DATA_INT len 4 prec 0; DB_ROW_ID: DATA_SYS prtype 256 len 6 prec 0; DB_TRX_ID: DATA_SYS prtype 257 len 6 prec 0; DB_ROLL_PTR: DATA_SYS prtype 258 len 7 prec 0;
  INDEX: name PRIMARY, id 0 250, fields 1/15, type 3
   root page 57, appr.key vals 0, leaf pages 1, size pages 1
   FIELDS:  film_id DB_TRX_ID DB_ROLL_PTR title description release_year language_id original_language_id rental_duration rental_rate length replacement_cost rating special_features last_update
  INDEX: name idx_title, id 0 251, fields 1/2, type 0
   root page 1235, appr.key vals 0, leaf pages 1, size pages 1
   FIELDS:  title film_id
  INDEX: name idx_fk_language_id, id 0 252, fields 1/2, type 0
   root page 1240, appr.key vals 0, leaf pages 1, size pages 1
   FIELDS:  language_id film_id
  INDEX: name idx_fk_original_language_id, id 0 253, fields 1/2, type 0
   root page 1241, appr.key vals 0, leaf pages 1, size pages 1
   FIELDS:  original_language_id film_id
...
}}}

We're looking for the sakila/film table, and specifically for its PRIMARY KEY details:
{{{
  INDEX: name PRIMARY, id 0 250, fields 1/15, type 3
}}}
The *0 250* part will tell us where in the split pages this table data resides. It translates to the *0-250* path in the split pages directory (as created by `page_parser`).

=== Finding the pages ===

Following our example, we need to be looking at:
{{{
[root@test innodb-recovery-0.3]# ls -l pages-1246354779/0-250/
total 300
-rw-r--r-- 1 root root 16384 Jun 30 02:39 57-00000057.page
-rw-r--r-- 1 root root 16384 Jun 30 02:39 580-00000580.page
-rw-r--r-- 1 root root 16384 Jun 30 02:39 619-00000619.page
-rw-r--r-- 1 root root 16384 Jun 30 02:39 620-00000620.page
-rw-r--r-- 1 root root 16384 Jun 30 02:39 621-00000621.page
-rw-r--r-- 1 root root 16384 Jun 30 02:39 622-00000622.page
-rw-r--r-- 1 root root 16384 Jun 30 02:39 623-00000623.page
-rw-r--r-- 1 root root 16384 Jun 30 02:39 624-00000624.page
-rw-r--r-- 1 root root 16384 Jun 30 02:39 625-00000625.page
-rw-r--r-- 1 root root 16384 Jun 30 02:39 626-00000626.page
-rw-r--r-- 1 root root 16384 Jun 30 02:39 629-00000629.page
-rw-r--r-- 1 root root 16384 Jun 30 02:39 630-00000630.page
-rw-r--r-- 1 root root 16384 Jun 30 02:39 631-00000631.page
-rw-r--r-- 1 root root 16384 Jun 30 02:39 75-00000057.page
-rw-r--r-- 1 root root 16384 Jun 30 02:39 76-00000580.page
}}}

Next: [http://code.google.com/p/innodb-tools/wiki/RecoveryStepsIsolatingTableData Isolating table's tablespace data]