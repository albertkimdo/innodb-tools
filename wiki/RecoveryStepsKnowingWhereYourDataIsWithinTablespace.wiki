#summary Recovery steps: Knowing where your data resides withing the tablespace

== Locating the data ==

If you're using `innodbfile_per_table`, you can skip this step. Your data resides within the `.ibd` file. It is a tablespace of its own.

In our example, we used shared tablespace. We wish to learn where, withing the shared tablespace, the data of our `customer` table resides.


=== Asking for InnoDB info ===

The following step assumes the table has not been dropped. 

In some schema, say, `test`, do:
{{{
mysql> CREATE TABLE `innodb_table_monitor` (`id` int(11) default NULL) ENGINE=InnoDB;
Query OK, 0 rows affected (0.01 sec)
}}}

(If the table already exists, DROP then CREATE again). Wait for a few seconds, then look at the MySQL error log. A summary of the output we're looking for follows:
{{{
===========================================
090630  5:12:25 INNODB TABLE MONITOR OUTPUT
===========================================
--------------------------------------
...
TABLE: name sakila/customer, id 0 142, columns 13, indexes 4, appr.rows 0
  COLUMNS: customer_id: DATA_INT len 2 prec 0; store_id: DATA_INT len 1 prec 0; first_name: type 12 len 135 prec 0; last_name: type 12 len 135 prec 0; email:
 type 12 len 150 prec 0; address_id: DATA_INT len 2 prec 0; active: DATA_INT len 1 prec 0; create_date: DATA_INT len 8 prec 0; last_update: DATA_INT len 4 pr
ec 0; DB_ROW_ID: DATA_SYS prtype 256 len 6 prec 0; DB_TRX_ID: DATA_SYS prtype 257 len 6 prec 0; DB_ROLL_PTR: DATA_SYS prtype 258 len 7 prec 0; 
  INDEX: name PRIMARY, id 0 286, fields 1/11, type 3
   root page 50, appr.key vals 0, leaf pages 1, size pages 1
   FIELDS:  customer_id DB_TRX_ID DB_ROLL_PTR store_id first_name last_name email address_id active create_date last_update
  INDEX: name idx_fk_store_id, id 0 287, fields 1/2, type 0
   root page 56, appr.key vals 0, leaf pages 1, size pages 1
   FIELDS:  store_id customer_id
  INDEX: name idx_fk_address_id, id 0 288, fields 1/2, type 0
   root page 63, appr.key vals 0, leaf pages 1, size pages 1
   FIELDS:  address_id customer_id
  INDEX: name idx_last_name, id 0 289, fields 1/2, type 0
   root page 1493, appr.key vals 0, leaf pages 1, size pages 1
   FIELDS:  last_name customer_id
...
}}}

We're looking for the sakila/customer table, and specifically for its PRIMARY KEY details:
{{{
  INDEX: name PRIMARY, id 0 286, fields 1/11, type 3
}}}
The *0 286* part will tell us where in the split pages this table data resides. It translates to the *0-286* path in the split pages directory (as created by `page_parser`).

=== Finding the pages ===

Following our example, we need to be looking at:
{{{
[root@test innodb-recovery-0.3]# ls -l pages-1246363747/0-286/
total 120
-rw-r--r-- 1 root root 16384 Jun 30 05:09 1254-00001254.page
-rw-r--r-- 1 root root 16384 Jun 30 05:09 1255-00001255.page
-rw-r--r-- 1 root root 16384 Jun 30 05:09 1256-00001256.page
-rw-r--r-- 1 root root 16384 Jun 30 05:09 1257-00001257.page
-rw-r--r-- 1 root root 16384 Jun 30 05:09 50-00000050.page
-rw-r--r-- 1 root root 16384 Jun 30 05:09 74-00000050.page
}}}

Next: [RecoveryStepsIsolatingTableData Isolating table's tablespace data]