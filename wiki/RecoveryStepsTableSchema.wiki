#summary Recovery steps: getting a hold on your table schema

== Get the table schema ==

This is pretty straight forward. You need to get the `CREATE TABLE` definition, a .frm file, or a very good memory :).

The result of any of the above should be that you must have an existing table in your database.
  * If the damage done was something like `DELETE`/`UPDATE`/`TRUCNATE` - the table's still there, so not a problem.
  * If you've used `DROP TABLE`, you'll have to restore from backup.

There is no need for data now. Just make sure you have the correct table definition. In our example, we only truncated a table - so table definition is still there. Otherwise, create the table anywhere - say, in the `test` schema.

Following our example, we have:
{{{
mysql> SELECT DATABASE();
+------------+
| DATABASE() |
+------------+
| sakila     | 
+------------+
1 row in set (0.00 sec)

mysql> SHOW CREATE TABLE customer \G
*************************** 1. row ***************************
       Table: customer
Create Table: CREATE TABLE `customer` (
  `customer_id` smallint(5) unsigned NOT NULL auto_increment,
  `store_id` tinyint(3) unsigned NOT NULL,
  `first_name` varchar(45) NOT NULL,
  `last_name` varchar(45) NOT NULL,
  `email` varchar(50) default NULL,
  `address_id` smallint(5) unsigned NOT NULL,
  `active` tinyint(1) NOT NULL default '1',
  `create_date` datetime NOT NULL,
  `last_update` timestamp NOT NULL default CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP,
  PRIMARY KEY  (`customer_id`),
  KEY `idx_fk_store_id` (`store_id`),
  KEY `idx_fk_address_id` (`address_id`),
  KEY `idx_last_name` (`last_name`),
  CONSTRAINT `fk_customer_address` FOREIGN KEY (`address_id`) REFERENCES `address` (`address_id`) ON UPDATE CASCADE,
  CONSTRAINT `fk_customer_store` FOREIGN KEY (`store_id`) REFERENCES `store` (`store_id`) ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8
1 row in set (0.00 sec)
}}}

Next: [RecoveryStepsGetHoldOfTablespaceFile getting hold of your tablespace file(s)]