#summary Recovery steps: importing tab-delimited data into table

== Importing data ==

Importing data is the last step, and it does not involve InnoDB Recovery Tools. Imporintg is done with the MySQL `LOAD DATA INFILE` command.

The following holds when issuing the `LOAD DATA INFILE` command on the `constraints_parser` output:
  * CSV (name misleading) is tab delimited. Use: `FIELDS TERMINATED BY '\t'`
  * Text is quoted. Use: `OPTIONALLY ENCLOSED BY '"'`
  * Each line starts with the table name. Use: `LINES STARTING BY '<table_name>\t'`
  * TIMESTAMP values are stored as integer values. Use: `FROM_UNIXTIME(@var)`, where @var is the placeholder of the timestamp column.

In our example:
{{{
LOAD DATA INFILE '/tmp/customer_data.csv'
REPLACE INTO TABLE customer
FIELDS TERMINATED BY '\t'
OPTIONALLY ENCLOSED BY '"'
LINES STARTING BY 'customer\t'
(customer_id, store_id, first_name, last_name, email, address_id, active, create_date, @var_l)
SET
  last_update = FROM_UNIXTIME(@var_l);
}}}

The `REPLACE INTO` fits in when there could be multiple versions of the same row. In cases we wish later `UPDATE`s to override previous ones, `REPLACE` does the job.
